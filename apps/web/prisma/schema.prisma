generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// DEFINISI TIPE (ENUMS)
enum PostType {
  STANDARD
  VIDEO
  NETWORK
  LIFESTYLE
  FEATURED_STRIP
  JALADRI_NETWORK
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

// MODEL UTAMA
model Article {
  id               String        @id @default(cuid())
  title            String
  slug             String        @unique
  content          String        @db.Text
  imageUrl         String
  viewCount        Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  publishedAt      DateTime?
  type             PostType      @default(STANDARD)
  status           ArticleStatus @default(DRAFT)
  isHotNews        Boolean       @default(false)
  isSlider         Boolean       @default(false)
  isRecommendation Boolean       @default(false)
  
  authorId         String?
  author           User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)

  categories       Category[]
  notifications    Notification[]

  @@map("articles")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  articles  Article[]

  @@map("categories")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  articles      Article[]
  accounts      Account[]
  sessions      Session[]
  liveTV        LiveTV[]
  notifications Notification[]
  liveTVComments LiveTVComment[]

  @@map("users")
}

model LiveTV {
  id          String    @id @default(cuid())
  title       String
  embedUrl    String    @db.Text
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
  
  comments    LiveTVComment[]

  @@map("live_tv")
}

model LiveTVComment {
  id        String   @id @default(cuid())
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  liveTVId  String
  liveTV    LiveTV   @relation(fields: [liveTVId], references: [id], onDelete: Cascade)
  
  @@map("live_tv_comments")
}

// MODEL UNTUK AUTENTIKASI NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  type      NotificationType @default(INFO)
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ARTICLE_APPROVED
  ARTICLE_REJECTED
}
